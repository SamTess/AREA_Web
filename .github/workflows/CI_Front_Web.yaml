name: AREA_FRONT_WEB CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  NODE_VERSION: '20'

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      deps-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('yarn.lock', 'package.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules and Yarn cache
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('package.json') }}
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-
            deps-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Verify installation
        run: |
          echo "✅ Dependencies installed successfully"
          echo "Node modules size: $(du -sh node_modules | cut -f1)"
          yarn --version

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.install.outputs.deps-cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Run ESLint
        run: yarn lint

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.install.outputs.deps-cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Run TypeScript type check
        run: yarn tsc --noEmit

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.install.outputs.deps-cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Check if unit tests exist
        id: check-unit-tests
        run: |
          if [ -d "__tests__" ] || [ -d "src/__tests__" ] || find . -name "*.test.*" -o -name "*.spec.*" | grep -v cypress | grep -q .; then
            echo "tests-exist=true" >> $GITHUB_OUTPUT
            echo "✅ Unit tests found, proceeding with Jest execution"
          else
            echo "tests-exist=false" >> $GITHUB_OUTPUT
            echo "⚠️ No unit tests found"
          fi

      - name: Run Jest unit tests
        if: steps.check-unit-tests.outputs.tests-exist == 'true'
        run: yarn test --coverage --watchAll=false

      - name: Upload coverage reports
        if: steps.check-unit-tests.outputs.tests-exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Skip unit tests
        if: steps.check-unit-tests.outputs.tests-exist == 'false'
        run: echo "No unit tests to run, skipping Jest execution"

  test-e2e:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.install.outputs.deps-cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Check if e2e tests exist
        id: check-e2e-tests
        run: |
          if [ -d "cypress" ] || find . -name "*.cy.*" -o -name "cypress.config.*" | grep -q .; then
            echo "tests-exist=true" >> $GITHUB_OUTPUT
            echo "✅ E2E tests found, proceeding with Cypress execution"
          else
            echo "tests-exist=false" >> $GITHUB_OUTPUT
            echo "⚠️ No E2E tests found"
          fi

      - name: Build Next.js for E2E testing
        if: steps.check-e2e-tests.outputs.tests-exist == 'true'
        run: yarn build

      - name: Start Next.js server
        if: steps.check-e2e-tests.outputs.tests-exist == 'true'
        run: yarn start &
        env:
          CI: true

      - name: Wait for server to be ready
        if: steps.check-e2e-tests.outputs.tests-exist == 'true'
        run: yarn wait-on http://localhost:3000 --timeout 60000

      - name: Run Cypress E2E tests
        if: steps.check-e2e-tests.outputs.tests-exist == 'true'
        run: yarn test:e2e

      - name: Upload Cypress screenshots
        if: failure() && steps.check-e2e-tests.outputs.tests-exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots/
          retention-days: 7

      - name: Upload Cypress videos
        if: always() && steps.check-e2e-tests.outputs.tests-exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos/
          retention-days: 7

      - name: Skip E2E tests
        if: steps.check-e2e-tests.outputs.tests-exist == 'false'
        run: echo "No E2E tests to run, skipping Cypress execution"

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [install, type-check, test, test-e2e]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.install.outputs.deps-cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Build Next.js application
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: .next/
          retention-days: 1

  release:
    name: Release to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: echo "Deploy to staging environment (e.g., via Vercel, Netlify, or Docker)"

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ needs.install.outputs.deps-cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Generate TypeScript documentation
        run: |
          echo "Installing typedoc for documentation generation"
          yarn add --dev typedoc
          echo "Generating documentation"
          yarn typedoc src --out docs --exclude "**/*.test.*" --exclude "**/*.spec.*" || echo "TypeDoc generation completed with warnings"